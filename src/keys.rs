const HID_KEY_NONE: u8 = 0x00;
const HID_KEY_A: u8 = 0x04;
const HID_KEY_B: u8 = 0x05;
const HID_KEY_C: u8 = 0x06;
const HID_KEY_D: u8 = 0x07;
const HID_KEY_E: u8 = 0x08;
const HID_KEY_F: u8 = 0x09;
const HID_KEY_G: u8 = 0x0A;
const HID_KEY_H: u8 = 0x0B;
const HID_KEY_I: u8 = 0x0C;
const HID_KEY_J: u8 = 0x0D;
const HID_KEY_K: u8 = 0x0E;
const HID_KEY_L: u8 = 0x0F;
const HID_KEY_M: u8 = 0x10;
const HID_KEY_N: u8 = 0x11;
const HID_KEY_O: u8 = 0x12;
const HID_KEY_P: u8 = 0x13;
const HID_KEY_Q: u8 = 0x14;
const HID_KEY_R: u8 = 0x15;
const HID_KEY_S: u8 = 0x16;
const HID_KEY_T: u8 = 0x17;
const HID_KEY_U: u8 = 0x18;
const HID_KEY_V: u8 = 0x19;
const HID_KEY_W: u8 = 0x1A;
const HID_KEY_X: u8 = 0x1B;
const HID_KEY_Y: u8 = 0x1C;
const HID_KEY_Z: u8 = 0x1D;
const HID_KEY_1: u8 = 0x1E;
const HID_KEY_2: u8 = 0x1F;
const HID_KEY_3: u8 = 0x20;
const HID_KEY_4: u8 = 0x21;
const HID_KEY_5: u8 = 0x22;
const HID_KEY_6: u8 = 0x23;
const HID_KEY_7: u8 = 0x24;
const HID_KEY_8: u8 = 0x25;
const HID_KEY_9: u8 = 0x26;
const HID_KEY_0: u8 = 0x27;
const HID_KEY_ENTER: u8 = 0x28;
const HID_KEY_ESCAPE: u8 = 0x29;
const HID_KEY_BACKSPACE: u8 = 0x2A;
const HID_KEY_TAB: u8 = 0x2B;
const HID_KEY_SPACE: u8 = 0x2C;
const HID_KEY_MINUS: u8 = 0x2D;
const HID_KEY_EQUAL: u8 = 0x2E;
const HID_KEY_BRACKET_LEFT: u8 = 0x2F;
const HID_KEY_BRACKET_RIGHT: u8 = 0x30;
const HID_KEY_BACKSLASH: u8 = 0x31;
const HID_KEY_EUROPE_1: u8 = 0x32;
const HID_KEY_SEMICOLON: u8 = 0x33;
const HID_KEY_APOSTROPHE: u8 = 0x34;
const HID_KEY_GRAVE: u8 = 0x35;
const HID_KEY_COMMA: u8 = 0x36;
const HID_KEY_PERIOD: u8 = 0x37;
const HID_KEY_SLASH: u8 = 0x38;
const HID_KEY_CAPS_LOCK: u8 = 0x39;
const HID_KEY_F1: u8 = 0x3A;
const HID_KEY_F2: u8 = 0x3B;
const HID_KEY_F3: u8 = 0x3C;
const HID_KEY_F4: u8 = 0x3D;
const HID_KEY_F5: u8 = 0x3E;
const HID_KEY_F6: u8 = 0x3F;
const HID_KEY_F7: u8 = 0x40;
const HID_KEY_F8: u8 = 0x41;
const HID_KEY_F9: u8 = 0x42;
const HID_KEY_F10: u8 = 0x43;
const HID_KEY_F11: u8 = 0x44;
const HID_KEY_F12: u8 = 0x45;
const HID_KEY_PRINT_SCREEN: u8 = 0x46;
const HID_KEY_SCROLL_LOCK: u8 = 0x47;
const HID_KEY_PAUSE: u8 = 0x48;
const HID_KEY_INSERT: u8 = 0x49;
const HID_KEY_HOME: u8 = 0x4A;
const HID_KEY_PAGE_UP: u8 = 0x4B;
const HID_KEY_DELETE: u8 = 0x4C;
const HID_KEY_END: u8 = 0x4D;
const HID_KEY_PAGE_DOWN: u8 = 0x4E;
const HID_KEY_ARROW_RIGHT: u8 = 0x4F;
const HID_KEY_ARROW_LEFT: u8 = 0x50;
const HID_KEY_ARROW_DOWN: u8 = 0x51;
const HID_KEY_ARROW_UP: u8 = 0x52;
const HID_KEY_NUM_LOCK: u8 = 0x53;
const HID_KEY_KEYPAD_DIVIDE: u8 = 0x54;
const HID_KEY_KEYPAD_MULTIPLY: u8 = 0x55;
const HID_KEY_KEYPAD_SUBTRACT: u8 = 0x56;
const HID_KEY_KEYPAD_ADD: u8 = 0x57;
const HID_KEY_KEYPAD_ENTER: u8 = 0x58;
const HID_KEY_KEYPAD_1: u8 = 0x59;
const HID_KEY_KEYPAD_2: u8 = 0x5A;
const HID_KEY_KEYPAD_3: u8 = 0x5B;
const HID_KEY_KEYPAD_4: u8 = 0x5C;
const HID_KEY_KEYPAD_5: u8 = 0x5D;
const HID_KEY_KEYPAD_6: u8 = 0x5E;
const HID_KEY_KEYPAD_7: u8 = 0x5F;
const HID_KEY_KEYPAD_8: u8 = 0x60;
const HID_KEY_KEYPAD_9: u8 = 0x61;
const HID_KEY_KEYPAD_0: u8 = 0x62;
const HID_KEY_KEYPAD_DECIMAL: u8 = 0x63;
const HID_KEY_EUROPE_2: u8 = 0x64;
const HID_KEY_APPLICATION: u8 = 0x65;
const HID_KEY_POWER: u8 = 0x66;
const HID_KEY_KEYPAD_EQUAL: u8 = 0x67;
const HID_KEY_F13: u8 = 0x68;
const HID_KEY_F14: u8 = 0x69;
const HID_KEY_F15: u8 = 0x6A;
const HID_KEY_F16: u8 = 0x6B;
const HID_KEY_F17: u8 = 0x6C;
const HID_KEY_F18: u8 = 0x6D;
const HID_KEY_F19: u8 = 0x6E;
const HID_KEY_F20: u8 = 0x6F;
const HID_KEY_F21: u8 = 0x70;
const HID_KEY_F22: u8 = 0x71;
const HID_KEY_F23: u8 = 0x72;
const HID_KEY_F24: u8 = 0x73;
const HID_KEY_EXECUTE: u8 = 0x74;
const HID_KEY_HELP: u8 = 0x75;
const HID_KEY_MENU: u8 = 0x76;
const HID_KEY_SELECT: u8 = 0x77;
const HID_KEY_STOP: u8 = 0x78;
const HID_KEY_AGAIN: u8 = 0x79;
const HID_KEY_UNDO: u8 = 0x7A;
const HID_KEY_CUT: u8 = 0x7B;
const HID_KEY_COPY: u8 = 0x7C;
const HID_KEY_PASTE: u8 = 0x7D;
const HID_KEY_FIND: u8 = 0x7E;
const HID_KEY_MUTE: u8 = 0x7F;
const HID_KEY_VOLUME_UP: u8 = 0x80;
const HID_KEY_VOLUME_DOWN: u8 = 0x81;
//const HID_KEY_LOCKING_CAPS_LOCK: u8 = 0x82;
//const HID_KEY_LOCKING_NUM_LOCK: u8 = 0x83;
//const HID_KEY_LOCKING_SCROLL_LOCK: u8 = 0x84;
const HID_KEY_KEYPAD_COMMA: u8 = 0x85;
const HID_KEY_KEYPAD_EQUAL_SIGN: u8 = 0x86;
const HID_KEY_KANJI1: u8 = 0x87;
const HID_KEY_KANJI2: u8 = 0x88;
const HID_KEY_KANJI3: u8 = 0x89;
const HID_KEY_KANJI4: u8 = 0x8A;
const HID_KEY_KANJI5: u8 = 0x8B;
const HID_KEY_KANJI6: u8 = 0x8C;
const HID_KEY_KANJI7: u8 = 0x8D;
const HID_KEY_KANJI8: u8 = 0x8E;
const HID_KEY_KANJI9: u8 = 0x8F;
const HID_KEY_LANG1: u8 = 0x90;
const HID_KEY_LANG2: u8 = 0x91;
const HID_KEY_LANG3: u8 = 0x92;
const HID_KEY_LANG4: u8 = 0x93;
const HID_KEY_LANG5: u8 = 0x94;
const HID_KEY_LANG6: u8 = 0x95;
const HID_KEY_LANG7: u8 = 0x96;
const HID_KEY_LANG8: u8 = 0x97;
const HID_KEY_LANG9: u8 = 0x98;
const HID_KEY_ALTERNATE_ERASE: u8 = 0x99;
const HID_KEY_SYSREQ_ATTENTION: u8 = 0x9A;
const HID_KEY_CANCEL: u8 = 0x9B;
const HID_KEY_CLEAR: u8 = 0x9C;
const HID_KEY_PRIOR: u8 = 0x9D;
const HID_KEY_RETURN: u8 = 0x9E;
const HID_KEY_SEPARATOR: u8 = 0x9F;
const HID_KEY_OUT: u8 = 0xA0;
const HID_KEY_OPER: u8 = 0xA1;
const HID_KEY_CLEAR_AGAIN: u8 = 0xA2;
const HID_KEY_CRSEL_PROPS: u8 = 0xA3;
const HID_KEY_EXSEL: u8 = 0xA4;
//const HID_KEY_CONTROL_LEFT: u8 = 0xE0;
//const HID_KEY_SHIFT_LEFT: u8 = 0xE1;
//const HID_KEY_ALT_LEFT: u8 = 0xE2;
//const HID_KEY_GUI_LEFT: u8 = 0xE3;
//const HID_KEY_CONTROL_RIGHT: u8 = 0xE4;
//const HID_KEY_SHIFT_RIGHT: u8 = 0xE5;
//const HID_KEY_ALT_RIGHT: u8 = 0xE6;
//const HID_KEY_GUI_RIGHT: u8 = 0xE7;


#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum Key {
    Modifier(u8),
    K(u8)
}

use sdl2::keyboard::Scancode;
pub fn scancode_to_key(scancode: Scancode) -> Key {
    use Scancode::*;
    Key::K(match scancode {
        A => HID_KEY_A,
        B => HID_KEY_B,
        C => HID_KEY_C,
        D => HID_KEY_D,
        E => HID_KEY_E,
        F => HID_KEY_F,
        G => HID_KEY_G,
        H => HID_KEY_H,
        I => HID_KEY_I,
        J => HID_KEY_J,
        K => HID_KEY_K,
        L => HID_KEY_L,
        M => HID_KEY_M,
        N => HID_KEY_N,
        O => HID_KEY_O,
        P => HID_KEY_P,
        Q => HID_KEY_Q,
        R => HID_KEY_R,
        S => HID_KEY_S,
        T => HID_KEY_T,
        U => HID_KEY_U,
        V => HID_KEY_V,
        W => HID_KEY_W,
        X => HID_KEY_X,
        Y => HID_KEY_Y,
        Z => HID_KEY_Z,
        Num1 => HID_KEY_1,
        Num2 => HID_KEY_2,
        Num3 => HID_KEY_3,
        Num4 => HID_KEY_4,
        Num5 => HID_KEY_5,
        Num6 => HID_KEY_6,
        Num7 => HID_KEY_7,
        Num8 => HID_KEY_8,
        Num9 => HID_KEY_9,
        Num0 => HID_KEY_0,
        Return => HID_KEY_ENTER,
        Escape => HID_KEY_ESCAPE,
        Backspace => HID_KEY_BACKSPACE,
        Tab => HID_KEY_TAB,
        Space => HID_KEY_SPACE,
        Minus => HID_KEY_MINUS,
        Equals => HID_KEY_EQUAL,
        LeftBracket => HID_KEY_BRACKET_LEFT,
        RightBracket => HID_KEY_BRACKET_RIGHT,
        Backslash => HID_KEY_BACKSLASH,
        NonUsHash => HID_KEY_EUROPE_1,
        Semicolon => HID_KEY_SEMICOLON,
        Apostrophe => HID_KEY_APOSTROPHE,
        Grave => HID_KEY_GRAVE,
        Comma => HID_KEY_COMMA,
        Period => HID_KEY_PERIOD,
        Slash => HID_KEY_SLASH,
        CapsLock => HID_KEY_CAPS_LOCK,
        F1 => HID_KEY_F1,
        F2 => HID_KEY_F2,
        F3 => HID_KEY_F3,
        F4 => HID_KEY_F4,
        F5 => HID_KEY_F5,
        F6 => HID_KEY_F6,
        F7 => HID_KEY_F7,
        F8 => HID_KEY_F8,
        F9 => HID_KEY_F9,
        F10 => HID_KEY_F10,
        F11 => HID_KEY_F11,
        F12 => HID_KEY_F12,
        PrintScreen => HID_KEY_PRINT_SCREEN,
        ScrollLock => HID_KEY_SCROLL_LOCK,
        Pause => HID_KEY_PAUSE,
        Insert => HID_KEY_INSERT,
        Home => HID_KEY_HOME,
        PageUp => HID_KEY_PAGE_UP,
        Delete => HID_KEY_DELETE,
        End => HID_KEY_END,
        PageDown => HID_KEY_PAGE_DOWN,
        Right => HID_KEY_ARROW_RIGHT,
        Left => HID_KEY_ARROW_LEFT,
        Down => HID_KEY_ARROW_DOWN,
        Up => HID_KEY_ARROW_UP,
        NumLockClear => HID_KEY_NUM_LOCK,
        KpDivide => HID_KEY_KEYPAD_DIVIDE,
        KpMultiply => HID_KEY_KEYPAD_MULTIPLY,
        KpMinus => HID_KEY_KEYPAD_SUBTRACT,
        KpPlus => HID_KEY_KEYPAD_ADD,
        KpEnter => HID_KEY_KEYPAD_ENTER,
        Kp1 => HID_KEY_KEYPAD_1,
        Kp2 => HID_KEY_KEYPAD_2,
        Kp3 => HID_KEY_KEYPAD_3,
        Kp4 => HID_KEY_KEYPAD_4,
        Kp5 => HID_KEY_KEYPAD_5,
        Kp6 => HID_KEY_KEYPAD_6,
        Kp7 => HID_KEY_KEYPAD_7,
        Kp8 => HID_KEY_KEYPAD_8,
        Kp9 => HID_KEY_KEYPAD_9,
        Kp0 => HID_KEY_KEYPAD_0,
        KpPeriod => HID_KEY_KEYPAD_DECIMAL,
        NonUsBackslash => HID_KEY_EUROPE_2,
        Application => HID_KEY_APPLICATION,
        Power => HID_KEY_POWER,
        KpEquals => HID_KEY_KEYPAD_EQUAL,
        F13 => HID_KEY_F13,
        F14 => HID_KEY_F14,
        F15 => HID_KEY_F15,
        F16 => HID_KEY_F16,
        F17 => HID_KEY_F17,
        F18 => HID_KEY_F18,
        F19 => HID_KEY_F19,
        F20 => HID_KEY_F20,
        F21 => HID_KEY_F21,
        F22 => HID_KEY_F22,
        F23 => HID_KEY_F23,
        F24 => HID_KEY_F24,
        Execute => HID_KEY_EXECUTE,
        Help => HID_KEY_HELP,
        Menu => HID_KEY_MENU,
        Select => HID_KEY_SELECT,
        Stop => HID_KEY_STOP,
        Again => HID_KEY_AGAIN,
        Undo => HID_KEY_UNDO,
        Cut => HID_KEY_CUT,
        Copy => HID_KEY_COPY,
        Paste => HID_KEY_PASTE,
        Find => HID_KEY_FIND,
        Mute => HID_KEY_MUTE,
        VolumeUp => HID_KEY_VOLUME_UP,
        VolumeDown => HID_KEY_VOLUME_DOWN,
        KpComma => HID_KEY_KEYPAD_COMMA,
        KpEqualsAS400 => HID_KEY_KEYPAD_EQUAL_SIGN,
        International1 => HID_KEY_KANJI1,
        International2 => HID_KEY_KANJI2,
        International3 => HID_KEY_KANJI3,
        International4 => HID_KEY_KANJI4,
        International5 => HID_KEY_KANJI5,
        International6 => HID_KEY_KANJI6,
        International7 => HID_KEY_KANJI7,
        International8 => HID_KEY_KANJI8,
        International9 => HID_KEY_KANJI9,
        Lang1 => HID_KEY_LANG1,
        Lang2 => HID_KEY_LANG2,
        Lang3 => HID_KEY_LANG3,
        Lang4 => HID_KEY_LANG4,
        Lang5 => HID_KEY_LANG5,
        Lang6 => HID_KEY_LANG6,
        Lang7 => HID_KEY_LANG7,
        Lang8 => HID_KEY_LANG8,
        Lang9 => HID_KEY_LANG9,
        AltErase => HID_KEY_ALTERNATE_ERASE,
        SysReq => HID_KEY_SYSREQ_ATTENTION,
        Cancel => HID_KEY_CANCEL,
        Clear => HID_KEY_CLEAR,
        Prior => HID_KEY_PRIOR,
        Return2 => HID_KEY_RETURN,
        Separator => HID_KEY_SEPARATOR,
        Out => HID_KEY_OUT,
        Oper => HID_KEY_OPER,
        ClearAgain => HID_KEY_CLEAR_AGAIN,
        CrSel => HID_KEY_CRSEL_PROPS,
        ExSel => HID_KEY_EXSEL,

        LCtrl => return Key::Modifier(1 << 0),
        LShift => return Key::Modifier(1 << 1),
        LAlt => return Key::Modifier(1 << 2),
        LGui => return Key::Modifier(1 << 3),
        RCtrl => return Key::Modifier(1 << 4),
        RShift => return Key::Modifier(1 << 5),
        RAlt => return Key::Modifier(1 << 6),
        RGui => return Key::Modifier(1 << 7),

        //LCtrl => HID_KEY_CONTROL_LEFT,
        //LShift => HID_KEY_SHIFT_LEFT,
        //LAlt => HID_KEY_ALT_LEFT,
        //LGui => HID_KEY_GUI_LEFT,
        //RCtrl => HID_KEY_CONTROL_RIGHT,
        //RShift => HID_KEY_SHIFT_RIGHT,
        //RAlt => HID_KEY_ALT_RIGHT,
        //RGui => HID_KEY_GUI_RIGHT,

        _ => HID_KEY_NONE
    })
}

impl From<Scancode> for Key {
    fn from(s: Scancode) -> Self {
        scancode_to_key(s)
    }
}

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum Modifier {
    LCtrl = 0,
    LShift = 1,
    LAlt = 2,
    LGui = 3,
    RCtrl = 4,
    RShift = 5,
    RAlt = 6,
    RGui = 7
}